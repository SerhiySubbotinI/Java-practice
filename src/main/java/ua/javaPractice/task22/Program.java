package ua.javaPractice.task22;

import ua.javaPractice.task2.UserList;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;

public class Program {
    private static final String SQL_SELECT_CUSTOMER = "SELECT * FROM customerbase";
    private static final String SQL_SELECT_PRODUCT = "SELECT * FROM productbase";
    private static final String SQL_INSERT = "INSERT INTO customerbase (first_name, last_name, amound_of_money) VALUES (?,?,?)";
    private static final String SQL_INSERT_PRODUCT = "INSERT INTO productbase (product_name, product_price) VALUES (?,?)";

    private static final String SQL_DELETE_CUSTOMER = "DELETE FROM customerbase WHERE customer_id =? ";
    private static final String SQL_DELETE_PRODUCT = "DELETE FROM productbase WHERE product_id =? ";
    static List<Customer> resultCustomer = new ArrayList<>();
    static List<Product> resultProduct = new ArrayList<>();


    public static void main(String[] args) {
        printMenu();
        startMenu();
    }


//    CREATE TABLE IF NOT EXISTS public.customerbase
//   (
//    customer_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
//    first_name character varying(128) COLLATE pg_catalog."default" NOT NULL,
//    last_name character varying(128) COLLATE pg_catalog."default" NOT NULL,
//    amound_of_money double precision NOT NULL,
//    CONSTRAINT customer_pk PRIMARY KEY (customer_id)
//)

    private static void selectCustomer() {
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/shop", "postgres", "MS1F");
             PreparedStatement preparedStatement = conn.prepareStatement(SQL_SELECT_CUSTOMER)) {
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                int customerId = resultSet.getInt("customer_id");
                String customerFirstName = resultSet.getString("first_name");
                String customerLastName = resultSet.getString("last_name");
                double customerAmoundOfMoney = resultSet.getDouble("amound_of_money");
                Customer customer = new Customer();
                customer.setCustomerId(customerId);
                customer.setCustomerFirstName(customerFirstName);
                customer.setCustomerLastName(customerLastName);
                customer.setCustomerAmountOfMoney(customerAmoundOfMoney);
                resultCustomer.add(customer);
            }
            resultCustomer.forEach(c -> System.out.println(c));
            resultCustomer.clear();
        } catch (
                SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        } catch (
                Exception e) {
            e.printStackTrace();
        }
    }

    private static void selectProduct() {
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/shop", "postgres", "MS1F");
             PreparedStatement preparedStatement = conn.prepareStatement(SQL_SELECT_PRODUCT)) {
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                int productId = resultSet.getInt("product_id");
                String productName = resultSet.getString("product_name");
                double productPrice = resultSet.getDouble("product_price");
                Product product = new Product();
                product.setProductId(productId);
                product.setProductName(productName);
                product.setProductPrice(productPrice);
                resultProduct.add(product);
            }
            resultProduct.forEach(p -> System.out.println(p));
            resultProduct.clear();
        } catch (
                SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        } catch (
                Exception e) {
            e.printStackTrace();
        }
    }

    private static void deleteCustomer(int customerID) {
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/shop", "postgres", "MS1F");
             PreparedStatement preparedStatement = conn.prepareStatement(SQL_DELETE_CUSTOMER)) {
            preparedStatement.setInt(1, customerID);
            preparedStatement.executeUpdate();
            System.out.println("Successful");
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void deleteProduct(int productID) {
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/shop", "postgres", "MS1F");
             PreparedStatement preparedStatement = conn.prepareStatement(SQL_DELETE_PRODUCT)) {
            preparedStatement.setInt(1, productID);
            preparedStatement.executeUpdate();
            System.out.println("Successful");
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void insertCustomer(String first_name, String last_name, double amound_of_money) {
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/shop", "postgres", "MS1F");
             PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, first_name);
            preparedStatement.setString(2, last_name);
            preparedStatement.setDouble(3, amound_of_money);
            preparedStatement.executeUpdate();
            System.out.println("Successful");
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void insertProduct(String product_name, double product_price) {
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/shop", "postgres", "MS1F");
             PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT_PRODUCT, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, product_name);
            preparedStatement.setDouble(2, product_price);
            preparedStatement.executeUpdate();
            System.out.println("Successful");
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void printMenu() {
        System.out.println("0.Exit \n1.Display list of all customers \n2.Display list of all products");
        System.out.println("3.Add new users to the system \n4.Add new products to the system");
        System.out.println("5.Delete selected customer \n6.Delete selected product");
              //  " \n7.Buy selected product");
//        System.out.println("8.Display list of user products by user id");
//        System.out.println("9.Display list of users that bought product by product id");
    }

    private static int checkInputNumber() {
        Scanner keyboard = new Scanner(System.in);
        int checkNumber;
        do {
            while (!keyboard.hasNextLong()) {
                System.out.print("Please, enter the number: ");
                keyboard.next();
            }
            checkNumber = (int) keyboard.nextLong();
            if (checkNumber < 0) System.out.print("The entered number can't be negative: ");
        } while (checkNumber < 0);
        return checkNumber;
    }

    private static void startMenu() {
        Scanner sc = new Scanner(System.in);
        do {
            int mode = checkInputNumber();
            switch (mode) {
                case 0:
                    System.exit(0);
                case 1: {
                    selectCustomer();
                    break;
                }
                case 2: {
                    selectProduct();
                    break;
                }
                case 3: {
                    System.out.println("Enter new customer first name, last name and amound of money:");
                    insertCustomer(sc.next(), sc.next(), sc.nextDouble());
                    break;
                }
                case 4: {
                    System.out.println("Enter new product name and price:");
                    insertProduct(sc.next(), sc.nextDouble());
                    break;
                }
                case 5:{
                    System.out.println("Enter customerID for delete selected customer:");
                    deleteCustomer(sc.nextInt());
                    break;
                }
                case 6:{
                    System.out.println("6.Enter productID for delete selected product:");
                    deleteProduct(sc.nextInt());
                    break;
                }
                case 7:{
//                    System.out.println("Enter customerId and productId to purchase the product:");
//                    buyProduct(sc.nextInt(),sc.nextInt());
                    break;
                }
            }
        } while (true);
    }
}

